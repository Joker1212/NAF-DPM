# model
IMAGE_SIZE : [128, 128]   # load image size, if it's train mode, it will be randomly cropped to IMAGE_SIZE. If it's test mode, it will be resized to IMAGE_SIZE.
CHANNEL_X : 3             # input channel
CHANNEL_Y : 3             # output channel
TIMESTEPS : 100           # diffusion steps
SCHEDULE : 'linear'       # linear or cosine
MODEL_CHANNELS : 32       # basic channels of Unet
NUM_RESBLOCKS : 1         # number of residual blocks
CHANNEL_MULT : [1,2,3,4]  # channel multiplier of each layer
NUM_HEADS : 1
MIDDLE_BLOCKS : 1
ENC_BLOCKS : [1,1,1,1]
DEC_BLOCKS : [1,1,1,1]


MODE : 2                 # 0 Test, 1 Train,  2 Finetune
TASK: 'Deblurring'
PRE_ORI : 'True'          # if True, predict $x_0$, else predict $/epsilon$.


# train
PATH_GT : '/mnt/media/giordano/dataset_deblurring/train_orig'              # path of ground truth
PATH_IMG : '/mnt/media/giordano/dataset_deblurring/train_blur'            # path of input
BATCH_SIZE : 64          # training batch size
NUM_WORKERS : 1           # number of workers
ITERATION_MAX : 800000   # max training iteration
LR : 0.0001               # learning rate
LOSS : 'L2'               # L1 or L2
EMA_EVERY : 100           # update EMA every EMA_EVERY iterations
START_EMA : 2000          # start EMA after START_EMA iterations
SAVE_MODEL_EVERY : 10000  # save model every SAVE_MODEL_EVERY iterations
EMA: 'True'               # if True, use EMA
CONTINUE_TRAINING : 'False'               # if True, continue training
CONTINUE_TRAINING_STEPS : 0           # continue training from CONTINUE_TRAINING_STEPS
PRETRAINED_PATH_INITIAL_PREDICTOR : '/mnt/media/giordano/DocDiff_checksave/model_init_700000.pth'    # path of pretrained initial predictor
PRETRAINED_PATH_DENOISER : '/mnt/media/giordano/DocDiff_checksave/model_denoiser_700000.pth'            # path of pretrained denoiser
WEIGHT_SAVE_PATH : '/mnt/media/giordano/DocDiffPROVA'          # path to save model
TRAINING_PATH : '/mnt/media/giordano/DocDiffPROVA'              # path of training data
BETA_LOSS : 50            # hyperparameter to balance the pixel loss and the diffusion loss
HIGH_LOW_FREQ : 'True'    # if True, training with frequency separation
VALIDATE_EVERY : 1000
VALIDATE_ITERATIONS: 1000
WANDB: 'True'
PROJECT: 'NAFDPM_FINETUNE'

#TEST
NATIVE_RESOLUTION : 'False'               # if True, test with native resolution
DPM_SOLVER : 'True'      # if True, test with DPM_solver
DPM_STEP : 20             # DPM_solver step
BATCH_SIZE_VAL : 1        # test batch size
TEST_PATH_GT : '/mnt/media/giordano/orig' #dataset_deblurring/test_orig'         # path of ground truth
TEST_PATH_IMG : '/mnt/media/giordano/n_10' #dataset_deblurring/test_blur'        # path of input
TEST_INITIAL_PREDICTOR_WEIGHT_PATH : '/mnt/media/giordano/DocDiffContinueTrainingFinoA800/BEST_DISTS_model_init.pth'   # path of initial predictor
TEST_DENOISER_WEIGHT_PATH : '/mnt/media/giordano/DocDiffContinueTrainingFinoA800/BEST_DISTS_model_denoiser.pth'            # path of denoiser
TEST_IMG_SAVE_PATH : '/mnt/media/giordano/DocDiff_logger'          # path to save results
LOGGER_PATH : '/mnt/media/giordano/DocDiff_logger'

#METRICS

PSNR: 'True'
SSIM: 'True'
DISTS: 'True'
LPIPS: 'True'
MUSIQ: 'False'
MANIQA: 'False'
MUSIQGT: 'False'
MANIQAGT: 'False'


# FINETUNE 

patch_CRNN_size: [32, 128]
crnn_model_path: '/mnt/media/giordano/CRNN/model_12.pth'
text_dir_train: '/mnt/media/giordano/dataset_deblurring/train_orig_text_paddle'
text_dir_test: '/mnt/media/giordano/dataset_deblurring/test_orig_text_paddle'
